import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import InfiniteScroll from "react-infinite-scroll-component";
import { InfiniteData } from "react-query";
import Date from "../components/Date";
import SearchComponent from "../components/SearchComponent";
import { GetAllLaunchesQuery, useInfiniteGetAllLaunchesQuery } from "../src/generated/graphql";
import graphqlRequestClient from "../src/lib/client/graphqlRequestClient";

import Skeleton, { SkeletonTheme } from "react-loading-skeleton";
import "react-loading-skeleton/dist/skeleton.css";
import Image from "next/image";
import { ArrowUpRight, CompareIcon, DocumentIcon, RocketIcon } from "../components/Icons";
import Badge from "../components/Badge";
import { TextInBWLine } from "../components/Layout/TextDecorator";
import Button from "../components/Layout/Button";
import { SplashScreen } from "../components/WebsiteLoaderAnimator";

const getData = (data: InfiniteData<GetAllLaunchesQuery> | undefined) => {
  let y: Array<LaunchDetails> = [];
  data?.pages.forEach((page) => {
    y = [...y, ...(page.launchesPast as LaunchDetails[])];
  });
  return {
    data: y,
    dataLength: y.length,
  };
};

export default function Home() {
  const [compareList, setCompareList] = useState([] as LaunchDetails[]);

  const handleCompareAction = (details: LaunchDetails, actionType: "add" | "remove", callback: Function) => {
    if (compareList.length >= 2 && actionType === "add") return; // allow only 2 items to be compared

    if (actionType === "add") {
      setCompareList((prev) => [...prev, details]);
    } else {
      const updatedList = compareList.filter((item) => item.mission_name !== details.mission_name);
      setCompareList(updatedList);
    }
    callback();
  };

  const [page, setPage] = useState(0);
  const { data: infiniteLaunces, fetchNextPage } = useInfiniteGetAllLaunchesQuery(
    "offset",
    graphqlRequestClient,
    {
      offset: 0,
    },
    {
      getNextPageParam: (lastPage) => {
        if (lastPage.launchesPast!.length < 10) return undefined;
        return 10 * (page + 1);
      },
      refetchOnWindowFocus: false,
    }
  );

  const [dataLength, setDataLength] = useState(0);
  const [dataList, setDataList] = useState([] as LaunchDetails[]);

  useEffect(() => {
    setDataLength(getData(infiniteLaunces).dataLength);
    setDataList(getData(infiniteLaunces).data);
  }, [infiniteLaunces]);

  return (
    <>
      <Head>
        <title>Space-X App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="w-screen h-screen font-serif text-gray-100">
        <main className="bg-gray-900 shadow ">
          {/* <WebsiteOpenerAnimator /> */}
          <SplashScreen />
          {/* --------------------------------- Header --------------------------------- */}

          <header className="p-4 h-[10vh]  flex items-center ">
            <Image src="/assets/spacex.png" height={160} width={160} className="object-contain" alt="space-x logo" />
            {/* Search Section */}

            <SearchComponent />
          </header>

          <section className="grid grid-cols-12 px-6 gap-x-6">
            {/* Launches List Section */}
            <section className="flex flex-col col-span-9 ">
              <div className="h-[90vh] overflow-y-scroll  p-4" id="scrollableDiv">
                <InfiniteScroll
                  dataLength={dataLength} //This is important field to render the next data
                  next={() => {
                    fetchNextPage();
                    setPage(page + 1);
                  }}
                  hasMore
                  loader={
                    <SkeletonTheme baseColor="#303842" highlightColor="#1F2A38">
                      <p>
                        <Skeleton count={6} className="h-40 mb-4" />
                      </p>
                    </SkeletonTheme>
                  }
                  endMessage={
                    <p style={{ textAlign: "center" }}>
                      <b>Yay! You have seen it all</b>
                    </p>
                  }
                  scrollThreshold={0.9}
                  className="flex flex-col space-y-4 "
                  scrollableTarget="scrollableDiv"
                >
                  {dataList?.map((launch) => (
                    <LaunchCard
                      key={launch?.id}
                      launchDetails={launch as LaunchDetails}
                      handleCompareAction={handleCompareAction}
                    />
                  ))}
                </InfiniteScroll>
              </div>
            </section>
            <section className="col-span-3 ">
              <CompareSection list={compareList} />
            </section>
          </section>
        </main>
      </div>
    </>
  );
}

const CompareSection = ({ list }: { list: LaunchDetails[] }) => {
  const router = useRouter();

  return (
    <div className="flex flex-col p-2 space-y-4">
      <button
        className={`inline-flex  px-4 py-3 items-center justify-center  text-sm font-medium rounded-lg bg-gray-200 text-gray-800 hover:bg-gray-300 ${
          list.length < 2 && "cursor-not-allowed"
        } `}
        disabled={list.length < 2}
        onClick={() => router.push(`/compare?launchId1=${list[0].id}&launchId2=${list[1].id}`)}
      >
        <CompareIcon />
        <span className="ml-2 text-base">Compare Launches</span>
      </button>
      {list.map((launch) => (
        <LaunchCard key={launch?.mission_name} launchDetails={launch as LaunchDetails} isCompareMode />
      ))}
    </div>
  );
};

type LaunchDetails = NonNullable<NonNullable<GetAllLaunchesQuery["launchesPast"]>[number]>;
// shows individual launch details
const LaunchCard = ({
  launchDetails,
  isCompareMode = false,
  handleCompareAction,
}: {
  launchDetails: LaunchDetails;
  isCompareMode?: boolean;
  handleCompareAction?: (details: LaunchDetails, actionType: "add" | "remove", callback: () => void) => void;
}) => {
  const [addedToCompareList, setAddedToCompareList] = useState(false);

  const { mission_name, launch_date_local, launch_site, launch_success, rocket } = launchDetails;

  return (
    <>
      <div className="p-4 bg-gray-800 border border-gray-700 rounded-md shadow-2xl">
        <div className="flex items-center space-x-4 ">
          <h3 className="inline text-xl">{mission_name}</h3>
          {!isCompareMode ? (
            <>
              <Badge type={launch_success ? "success" : "failure"} />
              <Date
                date={launch_date_local}
                style={{
                  marginLeft: "auto",
                }}
              />
            </>
          ) : null}
        </div>
        <h6 className="my-1 text-sm text-gray-300">Site : {launch_site?.site_name_long}</h6>
        <div className={`flex ${isCompareMode ? "mt-0" : "mt-4"}`}>
          <div className="flex items-end flex-1 space-x-12">
            <div className="flex flex-col items-center justify-center space-y-2 w-max ">
              {!isCompareMode && <RocketIcon />}
              <p className="text-base">
                {rocket?.rocket_name} ({rocket?.rocket_type})
              </p>
            </div>
            {!isCompareMode ? (
              <>
                <div className="flex flex-col text-base ">
                  <div className="flex-1 text-sm">
                    <p>Flight: {rocket?.first_stage?.cores?.[0]?.flight}</p>
                    <p>Reuse Count: {rocket?.first_stage?.cores?.[0]?.core?.reuse_count}</p>
                    <p>Core Status: {rocket?.first_stage?.cores?.[0]?.core?.status || "unknown"}</p>
                  </div>
                  <TextInBWLine text="stage 1" />
                </div>

                <div className="flex flex-col text-sm ">
                  <div className="flex-1">
                    <p>Payload type : {rocket?.second_stage?.payloads?.[0]?.payload_type} </p>
                    <p>
                      Payload mass :{" "}
                      {rocket?.second_stage?.payloads?.[0]?.payload_mass_kg
                        ? `${rocket?.second_stage?.payloads?.[0]?.payload_mass_kg} kg`
                        : "unknown"}
                    </p>
                  </div>
                  <TextInBWLine text="stage 2" />
                </div>
              </>
            ) : null}
          </div>
          {!isCompareMode ? (
            <>
              <div className="flex items-end justify-center space-x-4 ">
                <Button Icon={ArrowUpRight} text="Ships" />
                <Button
                  Icon={DocumentIcon}
                  text="Know more"
                  variant="outlined"
                  onClick={() => window.open(launchDetails.links?.wikipedia! || "", "_blank")}
                />
                <Button
                  Icon={CompareIcon}
                  text={addedToCompareList ? "Remove from compare" : "Add to Compare"}
                  variant="outlined"
                  onClick={() => {
                    handleCompareAction?.(launchDetails, addedToCompareList ? "remove" : "add", () =>
                      setAddedToCompareList((prev) => !prev)
                    );
                  }}
                />
              </div>
            </>
          ) : null}
        </div>
      </div>
    </>
  );
};
